Chapter 1: Introduction to Applications 
Q1. - Define Applications. 
Answer: An application is a collection of related programs that are  
designed to perform specific tasks or operations for the user.  
These programs work together in a coordinated manner to achieve 
a particular functionality, such as managing data, processing  
information, or interacting with users. 
Applications can be: 
Stand Alone/Desktop Applications – Run on personal computers  
 (e.g., Microsoft Word, Notepad). 
Web Applications – Run in web browsers and are accessed over 
 the internet (e.g., Gmail, Facebook). 
Mobile Applications – Designed for mobile devices  
 (e.g., WhatsApp, Instagram). 
Enterprise Applications – Large-scale software used in organizations 
 (e.g., ERP, CRM systems). 
Q. How do we give input? 
Answer: In application development, inputs can be provided through different levels or mediums depending on the type of application and its 
interface. The main four input levels are: 
 - using Console Input 
 - using GUI Input 
 - WebBroswer Input 
 - Application to Application(Webservices) 
1. Console Input: 
-------------------- 
Definition: The most basic form of input where users provide data 
through the terminal or command-line interface. 
Example: Java's Scanner or BufferedReader classes to read input  
 from the keyboard. 
Use Case: Used in beginner-level Java programs, utility scripts,  
 or system-level tools. 
e.g: 
Scanner sc = new Scanner(System.in); 
System.out.print("Enter your name: "); 
String name = sc.nextLine(); 
2. GUI Input (Graphical User Interface): 
------------------------------------------- 
Definition: Input is taken via graphical components like text fields, 
buttons, checkboxes, etc. 
Tools/Technologies: Java Swing, JavaFX, AWT.
1 
Use Case: Desktop applications with a user-friendly interface. 
e.g: 
JTextField nameField = new JTextField(); 
JButton submit = new JButton("Submit"); 
3. Web Browser Input: 
--------------------- 
Definition: Input is provided through HTML forms and web elements within a web browser. Tools/Technologies: HTML, CSS, JavaScript on the front end; Servlets, JSP,  Spring MVC on the back end. 
Use Case: Web-based applications accessed via browsers. 
e.g:  
<form action="submitData" method="post"> 
 <input type="text" name="username" /> 
 <input type="submit" value="Submit" /> 
</form> 
4. Application to Application (Web Services): 
--------------------------------------------- 
Definition: Input and data exchange happen between applications without human  involvement, often over a network. 
Technologies: REST APIs, SOAP, JSON, XML, HTTP/HTTPS. 
Use Case: Microservices, cloud communication, payment gateways, third-party  integrations. 
e.g: 
// JSON input sent from one app to another 
{ 
 "userId": "12345", 
 "action": "login" 
} 
Q.3. What are the types of applications?Explain. 
Answer: Applications are categorized based on their platform and usage. Below are the common types of applications: 
1. Desktop Applications/ Stand Alone Applications:  
----------------------------------------------------- 
Definition: These are software programs that run locally on a personal computer or laptop. They don't require a web browser or an internet connection(except for  updates or online features). 
- These applications are also termed as non server application. 
- SAA are categorised into two types based on user's interaction: 
 - CUI Application: user interacts through console. 
 - GUI Application: user interacts through GUI components. 
 (Swing,JavaFx,AWT used for GUI applications) 
Features: 
- Installed directly on a system. 
- Can work offline. 
- Utilizes the computer’s hardware resources. 
Examples: 
Microsoft Word – A word processing application. 
Notepad – A basic text editor for writing and editing plain text.
2 
